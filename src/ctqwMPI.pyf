!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module libpyctqw_MPI ! in 
    interface  ! in :libpyctqw_MPI
        module ctqwmpi ! in :libpyctqw_MPI:ctqwMPI.F90
            use ifport
            subroutine exportvec(vec,filename,filetype) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)               :: vec
                character*50, intent(in) :: filename
                character*3, intent(in)  :: filetype
            end subroutine exportvec
            subroutine importvec(vec,filename,filetype) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)               :: vec
                character*50, intent(in) :: filename
                character*3, intent(in)  :: filetype
            end subroutine importvec
            subroutine exportmat(mat,filename,filetype) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)               :: mat
                character*50, intent(in) :: filename
                character*3, intent(in)  :: filetype
            end subroutine exportmat
            subroutine importmat(mat,filename,filetype) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)               :: mat
                character*50, intent(in) :: filename
                character*3, intent(in)  :: filetype
            end subroutine importmat
            subroutine identity(mat,n) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer, intent(in)     :: n
                complex(8), intent(out) :: mat(n,n)
            end subroutine identity
            subroutine kron(m1,r1,c1,m2,r2,c2,kronprod) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                complex(8),intent(in)   :: m1(r1,c1)
                integer, intent(in)     :: r1
                integer, intent(in)     :: c1
                complex(8)              :: m2(r2,c2)
                integer, intent(in)     :: r2
                integer, intent(in)     :: c2
                complex(8), intent(out) :: kronprod(r1*r2,c1*c2)
            end subroutine kron
            subroutine importadjtoh(mat,filename,p,d,amp,interaction,nd) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)              :: mat
                character*50, intent(in):: filename
                character, intent(in)   :: p
                integer, intent(in)     :: d(nd)
                complex(8), intent(in)  :: amp(nd)
                complex(8), intent(in)  :: interaction
                integer, intent(in)     :: nd
            end subroutine importadjtoh
            subroutine adjtoh(mat,adjArray,p,d,amp,interaction,nd,N) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)              :: mat
                character, intent(in)   :: p
                integer, intent(in)     :: adjArray(N,N)
                integer, intent(in)     :: d(nd)
                complex(8), intent(in)  :: amp(nd)
                complex(8), intent(in)  :: interaction
                integer, intent(in)     :: nd
                integer, intent(in)     :: N
            end subroutine adjtoh
            function coord(x,y,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer intent(in)     :: x
                integer intent(in)     :: y
                integer intent(in)     :: n
                integer                :: coord
            end function coord
            function coord3p(x,y,z,n) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer intent(in)     :: x
                integer intent(in)     :: y
                integer intent(in)     :: z
                integer intent(in)     :: n
                integer                :: coord3p
            end function coord3p
            subroutine marginal1(psi,prob,n) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi
                integer(8)             :: prob
                integer, intent(in)    :: n
            end subroutine marginal1
            subroutine marginal2(psi,psim,p,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi
                integer(8)             :: psim
                character, intent(in)  :: p
                integer, intent(in)    :: n
            end subroutine marginal2
            subroutine marginal3(psi,psim,p,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi
                integer(8)             :: psim
                character, intent(in)  :: p
                integer, intent(in)    :: n
            end subroutine marginal3
            subroutine p1_init(psi0,init_state,num,n) ! in :libpyctqw_MPI:ctqwMPI.F90:ctqwmpi
                integer(8)             :: psi0
                complex(8), intent(in) :: init_state(num,2)
                integer, intent(in)    :: num
                integer, intent(in)    :: n
            end subroutine p1_init
            subroutine p2_init(psi0,init_state,num,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8)             :: psi0
                complex(8), intent(in) :: init_state(num,3)
                integer, intent(in)    :: num
                integer, intent(in)    :: n
            end subroutine p2_init
            subroutine p3_init(psi0,init_state,num,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8)             :: psi0
                complex(8), intent(in) :: init_state(num,4)
                integer, intent(in)    :: num
                integer, intent(in)    :: n
            end subroutine p3_init
            subroutine hamiltonian_p1_line(a,d,amp,nd,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8)             :: a
                integer, intent(in)    :: nd
                integer, intent(in)    :: d(nd)
                complex(8), intent(in) :: amp(nd)
                integer, intent(in)    :: n
            end subroutine hamiltonian_p1_line
            subroutine hamiltonian_p2_line(h2,d,amp,interaction,nd,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8)             :: h2
                integer, intent(in)    :: nd
                integer, intent(in)    :: d(nd)
                complex(8), intent(in) :: amp(nd)
                complex(8), intent(in) :: interaction
                integer, intent(in)    :: n
            end subroutine hamiltonian_p2_line
            subroutine hamiltonian_p3_line(h3,d,amp,interaction,nd,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8)             :: h3
                integer, intent(in)    :: nd
                integer, intent(in)    :: d(nd)
                complex(8), intent(in) :: amp(nd)
                complex(8), intent(in) :: interaction
                integer, intent(in)    :: n
            end subroutine hamiltonian_p3_line
            subroutine qw_krylov(a,t,v,y) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: a
                complex(8), intent(in) :: t
                integer(8), intent(in) :: v
                integer(8)             :: y
            end subroutine qw_krylov
            subroutine min_max_eigs(a,rank_bn,eval,eval_error,which,eig_solver,worktype,worktypeint,tolin,max_it,verbose,error) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in)   :: a
                integer(8), intent(in)   :: rank_bn
                character*3 intent(in)   :: which
                character*(*) intent(in) :: eig_solver
                character*3, intent(in)  :: worktype
                integer, intent(in)      :: worktypeint
                real(8), intent(in)      :: tolin
                integer, intent(in)      :: max_it
                logical, intent(in)      :: verbose
                complex(8), intent(out)  :: eval
                real(8), intent(out)     :: eval_error
                integer, intent(out)     :: error
            end subroutine min_max_eigs
            subroutine qw_cheby(psi0,psi,dt,h,emin,emax,rank_bn,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi0
                integer(8)         :: psi
                complex(8), intent(in) :: dt
                integer(8), intent(in) :: h
                complex(8), intent(in) :: emin
                complex(8), intent(in) :: emax
                integer(8), intent(in) :: rank_bn
                integer, intent(in)    :: n
            end subroutine qw_cheby
            subroutine partial_trace_array(psi,rhoX,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi
                complex(8), intent(out):: rhoX(n,n)
                integer, intent(in)    :: n
            end subroutine partial_trace_2p_array
            subroutine partial_trace_mat(psi,rhoX,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in) :: psi
                integer(8)             :: rhoX
                integer, intent(in)    :: n
            end subroutine partial_trace_2p_mat
            subroutine entanglement(psi,n,vNE,eig_solver,worktype,worktypeInt,tolIn,max_it,verbose,error) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer(8), intent(in)   :: psi
                integer, intent(in)      :: n
                real(8), intent(out)     :: vNE
                character*(*) intent(in) :: eig_solver
                character*3, intent(in)  :: worktype
                integer, intent(in)      :: worktypeint
                real(8), intent(in)      :: tolIn
                integer, intent(in)      :: max_it
                logical, intent(in)      :: verbose
                integer, intent(out)     :: error
            end subroutine entanglement
            function number_of_edges(adjArray, n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer, intent(in)     :: adjArray(n,n)
                integer, intent(in)     :: n
                integer                 :: number_of_edges
            end function number_of_edges
            function getEdgeState(edgeNum, adjArray, n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer, intent(in)     :: adjArray(n,n)
                integer, intent(in)     :: n
                integer, intent(in)     :: edgeNum
                integer                :: getEdgeState(2,3)
            end function getEdgeState
            subroutine getAllEdgeStates(init_states,localStateNum,adjArray,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer, intent(in)     :: adjArray(n,n)
                integer, intent(in)     :: n
                integer, intent(out)    :: localStateNum
                complex(8), intent(out) :: init_states(n*(n-1)/2,2,3)
            end subroutine getAllEdgeStates
            subroutine getAllEdgeStates3P(init_states,localStateNum,adjArray,n) ! in :libctqwMPI:libctqwMPI.F90:ctqwmpi
                integer, intent(in)     :: adjArray(n,n)
                integer, intent(in)     :: n
                integer, intent(out)    :: localStateNum
                complex(8), intent(out) :: init_states(n*(n-1)/2,2,4)
            end subroutine getAllEdgeStates3P
            subroutine GraphISCert(cert,certLength,adjArray,p,tol,expm_method,eig_solver,Emax_estimate,worktype,worktypeInt,tolIn,max_it,verbose,N)
                integer, intent(in)          :: N, adjArray(N,N), worktypeInt, max_it, p
                real(8), intent(in)          :: tolIn, Emax_estimate, tol
                character(len=*),intent(in)  :: expm_method, eig_solver
                character(len=3),intent(in)  :: worktype
                logical, intent(in)          :: verbose
                real(8), intent(out)         :: cert(2,(N^(p+1))*(N-1)/2)
                integer, intent(out)         :: certLength
            end subroutine GraphISCert
        end module ctqwmpi
    end interface 
end python module libpyctqw_MPI

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
