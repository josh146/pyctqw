[ctqw]
; simulation settings
particles = 2
grid_length = 50
time = 20.0

; set the location of the defect
; nodes and the respective amplitudes.
; 	Note that both lists must be
;	the same length!
defect_nodes = [10 , 11]
defect_amp = [0.,0.]

; set the initial state of the walker.
; For 1 walker, this is of the form
;	[(J1,AMP1), (J2,AMP2),...]
; For 2 walkers, this is of the form
;	[(X1,Y1,AMP1), (X2,Y2,AMP2),...]
p1_initial_state = [(0,1/sqrt(2)), (1,1j/sqrt(2))]
p2_initial_state = [(0,0,1/sqrt(2)), (2,2,1/sqrt(2))]

; Alternatively, set the location of an input 
; statespace. For 1P, this is a textfile with
; dimensions GRID_LENGTH*1; for 2P, this is a
; textfile with dimensions GRID_LENGTH*GRID*LENGTH
;	NOTE: this overides p*_initial_state
input_state = 



[options]
; set calculation options
; choose the algorithm used to calculate the matrix
; exponential, 'chebyshev' (default, fortran),
; 'burkadt' (fortran), or 'python-chebyshev'
expm = chebyshev
; when calculating the eigenvalues, force the linear algebra library
; to treat the Hamiltonian as a general complex matrix, rather than as a
; real, symmetric band matrix (the default)
eig_general = False
; choose the library used to calculate the eigenvalues,
; 'lapack' (default), 'python-scipy' (with ARPACK bindings)
; or 'python-numpy'. Note that lapack is significantly
; faster, however requires either intel-mkl or LAPACK be installed
eig_lib = lapack
; use SciPy and ARPACK to create sparse matrices.
; Note that this overrides the 'expm'  and 'eig-lib' setting,
; as it requires expm='python-chebyshev' and eig-lib='scipy-arpack'
sparse = False
; specify the fortran library to use (either 'intel' or 'gcc')
fortran = intel



[output]
; set output settings
; output directory
output = ./out
; whether the final statespace is
; outputted in the case of a 2pQW
statespace = true
